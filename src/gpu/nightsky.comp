//https://www.shadertoy.com/view/Md2SR3

#version 460

layout (local_size_x = 8, local_size_y = 4) in;

layout(rgba16f,set = 0, binding = 0) uniform image2D resultImage;

// Return random noise in the range [0.0, 1.0], as a function of x.
float Noise2d(in vec2 x)
{
    float xhash = cos(x.x * 37.0);
    float yhash = cos(x.y * 57.0);
    return fract(415.92653 * (xhash + yhash));
}

// Convert Noise2d() into a "star field" by stomping everything below fThreshold to zero.
float NoisyStarField(in vec2 vSamplePos, float fThreshold)
{
    float StarVal = Noise2d(vSamplePos);
    if (StarVal >= fThreshold)
        StarVal = pow((StarVal - fThreshold) / (1.0 - fThreshold), 6.0);
    else
        StarVal = 0.0;
    return StarVal;
}

// Stabilize NoisyStarField() by only sampling at integer values.
float StableStarField(in vec2 vSamplePos, float fThreshold)
{
    // Linear interpolation between four samples.
    // Note: This approach has some visual artifacts.
    // There must be a better way to "anti-alias" the star field.
    float fractX = fract(vSamplePos.x);
    float fractY = fract(vSamplePos.y);
    vec2 floorSample = floor(vSamplePos);
    float v1 = NoisyStarField(floorSample, fThreshold);
    float v2 = NoisyStarField(floorSample + vec2(0.0, 1.0), fThreshold);
    float v3 = NoisyStarField(floorSample + vec2(1.0, 0.0), fThreshold);
    float v4 = NoisyStarField(floorSample + vec2(1.0, 1.0), fThreshold);

    float StarVal = v1 * (1.0 - fractX) * (1.0 - fractY) +
                    v2 * (1.0 - fractX) * fractY +
                    v3 * fractX * (1.0 - fractY) +
                    v4 * fractX * fractY;
    return StarVal;
}

void main()
{
    ivec2 fragCoord = ivec2(gl_GlobalInvocationID.xy);
    vec2 vSamplePos = fragCoord.xy;

    // Sky Background Color
    vec3 vColor = vec3(0.1, 0.2, 0.4) * vSamplePos.y / imageSize(resultImage).y;

    // Note: Choose fThreshold in the range [0.99, 0.9999].
    // Higher values (i.e., closer to one) yield a sparser starfield.
    float StarFieldThreshold = 0.97;

    float StarVal = StableStarField(vSamplePos, StarFieldThreshold);
    vColor += vec3(StarVal);

    imageStore(resultImage, fragCoord, vec4(vColor, 1.0));
}
