this is a script for an unnamed play.

ToDo(facts):  Better Debug profiles.

12/23 1758
ToDo(facts): Fix flickering triangle (sync problem I think)
             Fixed.
                 1. I was handling cmds incorrectly in win32
                 2. My rendering attatchment info was outside of loop
ToDo(facts): Destroy resources
             Fixed.
ToDo(facts): Posix window so my linux friends can see my triangle
ToDo(facts): Window Abstraction
             Fixed.
ToDo(facts): Renderer Abstraction :skull:
             Fixed.
ToDo(facts): VkAssertResult profiles?

12/24 0825
ToDo(facts): Fix all those warnings
             Fixed.
ToDo(facts): Window callbacks instead of globals
             Fixed.
12/24 1010
ToDo(facts): Clean up triangle renderer

12/24 1834: Port to C++? I want to do this because I want to be able to use a physics engine in the future. 
            This is the only reason. constexpr and templates are just nice to have.
            I have decided against it. I will just whip my own physics engine out. Thats what source 2 did.

      1854: Work on dll reloading.

            Fix swapchain recreation bugs. Handle all window events. fix validation errors
            Done

12/24 2122: One translational unit. Maybe better to have multiple "single translational units".
            
            Math
            Model loading

This is me from the future. I am a git hopper. I travel between parallel git commits.
The abstraction you made was dogshit. So I am back. I spent 4 days fucking about. I have aged in real life.

12/30 0027: Work on hot reloading. It is pain to rapidly iterate otherwise.
12/39 1340: Completed. Platform layer needs clean up. But its works exactly as expected with no errors even after pervasive testing.
            My biggest takeaway is - "FUCK YOU MICROSOFT! (John Malkovitch voice)"

ToDo(facts): Clean up platform layer. Remember. It should be easy to be able to statically build without all that hot reloading. Hot
             reloading is purely a debug thing. Final build needs to be as fast as possible so all indirections / debug features must
             be removed.
Note(facts): I have been listening to Erika. Fuck it, I'm rolling my own physics engine. I am great at physics and programming so it
             wont be too hard to roll a very efficient one in C. I dislike C++ too much to port my code. Also, my physics needs wont
             be that much if I go the voxel route. Obviously, I will still use 3rd party libraries like cimgui and STB header family.
             I am not a pyscopath, I just hate C++ so so much. Once constexpr comes to C, C will be feature complete. I rolled out 
             this dll hot code reload all by myself and figured out vulkan from the spec. I can easily read relevant physics engine
             books and repositories (like jolt) to make my own. Remember, the only reason why I am rolling my own is because one 
             doesnt already exist in C. If Jolt had a C api, I wouldn't do this.

Next day:
Note(facts): I found a C api for jolt. It is up to date with 4.02 atm. Which is almost latest version. It gets updated with new releases.
             I can stick to C forever.
             Wait I misread. 
             Hi,
             Joltc is updated with latest 4.0.2 stable release of jolt physics, thus lot of bindings are missing into joltc, I add stuff when needed.

             Feel free to contribute.

             Updated with latest 4.0.2 stable release? But lots bindings are missing? So is it updated or not?
             Fucks sake. FUCK FUCK FUCK. I can't make my own physics engine c'mon be serious. AHHHH
             I will port to C++. More specificlly, make my code "C++ compliant". AHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH. 
             I will use no templates. No namespaces. No operator overloading, not C++ stl. My only instances of C++ code will be when I am 
             using the physics engine to make porting back and forth easy, because once I have a team of devs. They will be porting this back to C
             and working on physics.


 Note(facts): I have completed porting to C++. Takes longer to compile, but if I don't port now, it will be harder to port later. Atleast now I can use
              jolt. It is so fucking weird that jolt themselves didn't make a C api so other langugages could use. So So weird.



              Work on submitting render data to the renderer



Absolutely no idea why I am having some crashes. Made new branches to investigate later.
Considering sdl because windows.h is a fuckfest



Anyways work on making the renderer not require win layer. I don't want dogshit windows.h to meddle with the rest of my project. FUCK MICROSOFT (John Malkovwitch voice)
Done



time works now. I can only imagine I was having some buffer overflow, since I am calculating time very differently now and it works. Made branches just in case someone 
wants to investigate.



Work on the renderer now


ToDo(facts): compile vma as a dll so I don't have to compile it again
             false alarm. It doesn't take time anymore. idky gabe hates me so much lmao


 I haven't gotten much work done. I understand vulkan a little better though. Also, I started following vkguide and its been helpful. My code wasn't too far off from what he did
 (Except sync2, descr indexing and buffer address. Dynamic rendering was practicially identical though
 
 The dll hotreloading has easily been the best decision so far. It works wonderfully rn. Idk how I managed other engines w/o it. Tbf I didn't
 
 ToDo(facts 1703 1/5/24): Work through vkguide

 ToDo(facts): Make a py script to compile shaders. Something like py ./shaderc "foo/main.frag". This will compile and put main.frag.spv inside res/shaders/foo/
  
 ToDo(facts): Make the debug application entry handler thing.

 ToDo(facts 0445 1/11/24): organize renderer functions in different files. It is a pain to scroll around 2000 locs where most functions are complete. 
                           Also, remove all obsolete code
 ToDo(facts):              Set up imgui
 

 ToDo(facts): Make a 3d debug camera (done)
 ToDo(facts): Abstract making pipelines.
 
 ToDo(facts): Complete multiple mesh loading (done)
              
 ToDo(facts 1143 1/19/24): Work on texturing. I feel incredibly sick. Classes start this monday (today is friday).
 
 ToDo(facts): Sponza (doesn't) crashes. My guess is that it has to do with primitives since I haven't tested loading more than 1 primitive (Individual meshes have been whole primitives)
              I want to load textured shinchan first. So I will work on texturing if I feel better later. Also gltf models can be massive so I need a way to store them. I don't
              want them on my git.                                              

              1/22/24: Tried loading a model, crashed. Stepped through debugger, its because sometimes I create buffers with 0 indices (all vertices because everything is unique)
                       and that causes crashes because vma uses asserts to prevent this. Probably unrelated to Sponza, since Sponza doesn't crash. It actually shits my validation
                       layers and displays as one big black box (sponza kinda even looks like that if you open it in blender)
 
                       Best way to approach this is to go to gltf sample model testing page. Try to render each example in ascending order of features and see what breaks.
 
                       VS debugger disappoints me more than ever. I was getting null ptr issues even though I don't do that shit. Outside of VS, I didn't get those problems.
                       This led me to a very tiring wild goose chase. Anyways, I am sure sponza crash happens because of primitives thing. Sponza has meshes with 100+ primitives.
                       I don't acct for them. I will work on that now.                     
                       
                       Ok. I account for primitives now. Sponza doesn't crash anymore. Fire in the sky shows almost completely, except for some walls. I am still missing
                       something. I don't know what, I don't know why. U am not reading something. Sponza doesn't crash but a lot of things don't render. I am skipping out on some
                       important data. I also think that maybe not all meshes have index data. Maybe some are meant to be drawn with vkcmddraw. But that doesn't make sense
                       because my validation errors would be shitting themselves if I binded invalid index buffers.
 
                       Resolved
                       
 ToDo(facts): Symbolic link with res folder since the size is non trivial and I can't copy around assets and even cmake grunts when I ask her. Yes cmake is woman. 
              Also, put resources on gdrive and unlink all ref with git. Update readme with link to drive. drive? I am driving. There's something about you. Its hard to explain ...
              They're talking about you boy .... but you're still the same. I am Ryan Gosling.
 
              fire_in_the_sky loads without problems. Sponza doesn't. What I mentioned before is what the problem probably is. I'll look at the gltf spec and their github
              tutorial to understand it better.
              
              So, umm, weirdly. Other sponza models from sketchfab work properly. I have absolutely no idea why. I am too tired to investigate. I will clean up code
              and repo then move on to textures.
 
             AAHHHHHHHHHH it works NOWW. I doubted everyone. When the real culprit was my yee yaw engine memory. u32 and YkVertex were overwritten. It works
             with std::vector. I allocate more than enough memory. I will use malloc like a sane person. I am only doing this allocation once
             
             Resolved. The culprit wasn't the arena. I was overwriting indices when there were meshes with multiple primitives. Thus sponza and fits didn't work but
             shinchan and fits2 worked (1 mesh, multiple primitives vs multiple meshes, 1 primitives)

 ToDo(facts): Use a memory arena for engine memory too. Allocate carefully.
              Done

 ToDo(facts): Material pipeline. I want to see all of the lights.
 
 ToDo(facts): Scene global data. Like ambient light. I want to see some specular lights. And diffuse lights.
              Ambient light is done.

 ToDo(facts): Desc related helper functions inside desc file.

!! HIGH PRIORITY !!

 ToDo(facts): All temp allocations on the scratch arena
 ToDo(facts): Option to force integrated gpu
              (done)
 ToDo(facts): Modify game memory so I can hot reload like I used to (Basically stop destroying memory between recompilations)
              (done)
 ToDo(facts): Port to C and check compilation times. I saw a video of mine where I was compiling it in < half a second. It takes 3 - 8 seconds now.
              Don't know if its this much because of all the new code or because of C++. Investigate this. Unlinking crt isn't viable
              since I make use of dependencies and they definitely use them. glm is full of std::vector.
              (resolved)
!! ------------ !!

!!! HIGHER PRIORITY !!! (resolved)

C++ is fine. I have zero energy to write a physics engine. C++ is fine.
(true. I agree.)
I need to use memory arenas as first class instead of popping off bytes and giving it to others to use
(false. this is better. Resolved. My arena works perfectly now)
I'll use precompiled headers to reduce compile times.
Also, I should store vel, rot, and trans with mesh data instead of decomposing model matrix everytime.

unity build was deadend. It took ~6 seconds. Regular build is ~3 seconds
precompiled headers might be helpful

precompiled headers are mental. I get < 1s consistently.

ok hot reloading works again. I will put all dependencies inside header files so I can always use pch
!!! --------------- !!!

ToDo(facts)
0. account for primitives !!!
   wasted time on wondering why sponza textures didn't load.
   works now.

0.5 Do normals need to be re-calculated for objects that move?
    No, normal = mat3(transpose(inverse(model_mat))) * v.normal transforms them

1. Refactor :skull:
      Been going well. I don't want to fail so I will study a bit.
      So, the problem with loading more assets is that they use the buffers and desc
      sets inside the frame data and if I load more assets, I need to make more space
      for them inside my frame data. Also, the reason textures don't load for new models
      is because I am not writing their descriptor sets. Normally, after loading all models,
      I run my desc set update over them. So new models don't get that. Go ahead and do it.
      Have it so that the desc set update function receives an array of meshes that need
      updating instead of checking the renderer for meshes. Also, combine mesh count and mesh
      together. This engine is coming along well.

      Also, work on descr indexing. This will make abstraction much easier And use ssbos instead 
      of ubos. because ubo indexing isn't always supported.

      pipeline abstraction
      desc abstraction (after implementing indexing)

      Ok. Model assets completely use arenas. And controling them is very simple.
      Now I need to work on cleaning up how I hand vertices and indices (use 2 arenas)
      and clean up the model load file properly. It should look impeccable. My naming scheme
      for that file has gotten terrible. Also documenting what I did might help future me.

      Need to work on descr sets next, and then "render models", which will contain model
      assets that were asked to be rendered. My model assets struct just holds all models
      loaded by the engine. I want to render whatever I want to render, which is not all of them.

      So render models will be flattened up version of model assets and will be rebuilt everytime
      I try to render a new model. This is significant work so I will get to it after I implement
      the more basic things properly.

2. vertex colors
3. glb files texture parsing
4. shader compiling py script
      py * -r 

      compile all shaders recursively and suffix with .spv

      py * 
      compile non-recursively

      py pp/foo.bar

      compile a single shader
5. Multiple entry points thing ?
   For now I'll just use #if. I don't
   know how I want to structure it yet.

6. Camera zoom.

7. Complete lighting fully

8. Ray tracing rendering. (compute)

I will then compare.