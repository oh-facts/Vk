cmake_minimum_required(VERSION 3.16)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_CXX_STANDARD 20)

#project name
project(yk)

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-nullability-completeness")
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-nullability-completeness")
endif()

#--------target--------#

include_directories(src)
#add_subdirectory(vendor/vma/include)
find_package(Vulkan REQUIRED)

include_directories(
    src
    include
    vendor/stb/include
    vendor/vma/include
    ${Vulkan_INCLUDE_DIRS}
)



set(yk_src "src/yk.cpp" "src/renderer/renderer.cpp" "src/yk_debug_app.cpp" "vendor/stb/src/stb_image.c" )

set(yk_platform_layer  "src/win32_window.cpp")

add_library(platform STATIC ${yk_platform_layer} )



if(YK_BUILD_SHARED)
    add_library(${PROJECT_NAME} SHARED ${yk_src}) 
    target_compile_definitions(${PROJECT_NAME} PRIVATE YK_EXPORTS)
else()
    add_library(${PROJECT_NAME} STATIC ${yk_src})
endif()

target_link_libraries(${PROJECT_NAME}  ${Vulkan_LIBRARIES})

if(YK_BUILD_SHARED)
    add_executable(yk_test "src/main.cpp")
    target_compile_definitions(yk_test PRIVATE YK_EXPORTS)
else()
    add_executable(yk_test "src/main.cpp")
endif()
target_link_libraries(yk_test yk platform)

#---------------------#


#----------copy files----------#

set(files_copied FALSE)

function(copy_directory_if_changed source_dir destination_dir)
    file(GLOB_RECURSE source_files "${source_dir}/*")
    foreach(source_file IN LISTS source_files)
        file(RELATIVE_PATH relative_path "${source_dir}" "${source_file}")
        set(destination_file "${destination_dir}/${relative_path}")

        execute_process(
            COMMAND ${CMAKE_COMMAND} -E copy_if_different "${source_file}" "${destination_file}"
            RESULT_VARIABLE copy_result
        )

        if(NOT copy_result EQUAL 0)
            message(FATAL_ERROR "Error copying file: ${source_file}")
        else()
            set(files_copied TRUE)
        endif()
    endforeach()
endfunction()

copy_directory_if_changed(${CMAKE_CURRENT_SOURCE_DIR}/res ${CMAKE_CURRENT_BINARY_DIR}/res)

if (NOT files_copied)
    message("No files were copied.")
else()
    message("files were copied")
endif()


#|---compile-commands-|

add_custom_target(
    yk_copy-compile-commands ALL
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
        ${CMAKE_BINARY_DIR}/compile_commands.json
        ${CMAKE_CURRENT_LIST_DIR}
)

#|----------------|

#---------------------#