cmake_minimum_required(VERSION 3.16)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_CXX_STANDARD 20)

#project name
project(yk)

add_definitions(-D_CRT_SECURE_NO_WARNINGS)

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-nullability-completeness")
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-nullability-completeness")
endif()

#--------target--------#

include_directories(src)
#add_subdirectory(vendor/vma/include)
find_package(Vulkan REQUIRED)
add_subdirectory(vendor/glm)

include_directories(
    src
    include
    vendor/glm/
    vendor/stb/include
    vendor/vma/include
    vendor/cgltf/include
    ${Vulkan_INCLUDE_DIRS}
)

set(yk_src "src/yk.cpp" "vendor/vma/src/vk_mem_alloc.cpp" "src/renderer/renderer.cpp" "src/yk_debug_app.cpp" 
            "src/renderer/descriptors.cpp" "src/yk_memory.cpp" "src/renderer/ykr_model_loader.cpp"
            "src/renderer/ykr_debug_util.cpp" "src/renderer/ykr_common.cpp" "src/renderer/ykr_instance.cpp" "src/renderer/yk_debug_camera.cpp" "src/platform/yk_input.cpp" )

set(yk_platform_layer  "src/platform/win32_window.cpp" "src/platform/yk_input.cpp")

add_library(platform STATIC ${yk_platform_layer} )



if(YK_BUILD_SHARED)
    add_library(${PROJECT_NAME} SHARED ${yk_src}) 
    target_compile_definitions(${PROJECT_NAME} PRIVATE YK_EXPORTS)
else()
    add_library(${PROJECT_NAME} STATIC ${yk_src})
endif()



target_link_libraries(${PROJECT_NAME}  ${Vulkan_LIBRARIES} glm::glm)

if(YK_BUILD_SHARED)
    add_executable(yk_test "src/main.cpp")
    target_compile_definitions(yk_test PRIVATE YK_EXPORTS)
else()
    add_executable(yk_test "src/main.cpp")
endif()
target_link_libraries(yk_test yk platform)
target_precompile_headers(yk_test PRIVATE "src/pch.h")

#---------------------#

set(SOURCE_DIR "${CMAKE_SOURCE_DIR}")
set(BUILD_DIR "${CMAKE_BINARY_DIR}")

add_custom_command(
    TARGET yk_test POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E create_symlink
    ${SOURCE_DIR}/res ${BUILD_DIR}/res
    COMMENT "Creating symbolic link to res folder"
)



#----------copy files----------#

#|---compile-commands-|

add_custom_target(
    yk_copy-compile-commands ALL
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
        ${CMAKE_BINARY_DIR}/compile_commands.json
        ${CMAKE_CURRENT_LIST_DIR}
)

#|----------------|

#---------------------#